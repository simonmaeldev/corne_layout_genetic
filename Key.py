software = {
    "A" : [["A"]],
    "À" : [["GRAVE", "A"]],
    "Â" : [["CARET", "A"]],
    "Æ" : [["RA(Z)"]],
    "B" : [["B"]],
    "C" : [["C"]],
    "Ç" : [["SQT", "C"], ["RA(COMMA)"]],
    "D" : [["D"]],
    "E" : [["E"]],
    "É" : [["SQT", "E"], ["RA(E)"]],
    "È" : [["GRAVE", "E"]],
    "Ê" : [["CARET", "E"]],
    "Ë" : [["DQT", "E"]],
    "F" : [["F"]],
    "G" : [["G"]],
    "H" : [["H"]],
    "I" : [["I"]],
    "Î" : [["CARET", "I"]],
    "Ï" : [["DQT", "I"]],
    "J" : [["J"]],
    "K" : [["K"]],
    "L" : [["L"]],
    "M" : [["M"]],
    "N" : [["N"]],
    "O" : [["O"]],
    "Ô" : [["CARET", "O"]],
    "Œ" : [["RA(K)"]],
    "P" : [["P"]],
    "Q" : [["Q"]],
    "R" : [["R"]],
    "S" : [["S"]],
    "T" : [["T"]],
    "U" : [["U"]],
    "Û" : [["CARET", "U"]],
    "Ü" : [["DQT", "U"]],
    "Ù" : [["GRAVE", "U"]],
    "V" : [["V"]],
    "W" : [["W"]],
    "X" : [["X"]],
    "Y" : [["Y"]],
    "Z" : [["Z"]],
    "1" : [["N1"]],
    "2" : [["N2"]],
    "3" : [["N3"]],
    "4" : [["N4"]],
    "5" : [["N5"]],
    "6" : [["N6"]],
    "7" : [["N7"]],
    "8" : [["N8"]],
    "9" : [["N9"]],
    "0" : [["N0"]],
    "-" : [["MINUS"]],
    "=" : [["EQUAL"]],
    "!" : [["LS(N1)"],["EXCL"]],
    "@" : [["LS(N2)"], ["AT"]],
    "#" : [["LS(N3)"], ["HASH"]],
    "$" : [["LS(N4)"], ["DOLLAR"]],
    "%" : [["LS(N5)"], ["PERCENT"]],
    "^" : [["LS(N6)", "SPACE"], ["CARET", "SPACE"], ["LS(RA(N6))"]],
    "&" : [["LS(N7)"], ["AMPS"]],
    "*" : [["LS(N8)"], ["STAR"]],
    "(" : [["LS(N9)"], ["LPAR"]],
    ")" : [["LS(N0)"], ["RPAR"]],
    "_" : [["LS(MINUS)"], ["UNDER"]],
    "+" : [["LS(EQUAL)"], ["PLUS"]],
    "[" : [["LBKT"]],
    "]" : [["RBKT"]],
    "{" : [["LBRC"]],
    "}" : [["RBRC"]],
    "\\" : [["BSLH"]],
    "|" : [["LS(BSLH)"], ["PIPE"]],
    ";" : [["SEMI"]],
    ":" : [["LS(SEMI)"], ["COLON"]],
    "'" : [["SQT", "SPACE"], ["RA(SQT)"]],
    "\"" : [["LS(SQT)", "SPACE"], ["DQT", "SPACE"], ["LS(RA(SQT))"]],
    "`" : [["GRAVE", "SPACE"], ["RA(GRAVE)"]],
    "~" : [["LS(GRAVE)", "SPACE"], ["TILDE", "SPACE"], ["LS(RA(GRAVE))"]],
    "," : [["COMMA"]],
    "." : [["DOT"]],
    "/" : [["FSLH"]],
    "<" : [["LS(COMMA)"], ["LT"]],
    ">" : [["LS(DOT)"], ["GT"]],
    "?" : [["LS(FSLH)"], ["QMARK"]],
    " " : [["SPACE"]],
    "\n" : [["RET"]],
    "SPACE" : [["SPACE"]],
    "ESC" : [["ESC"]],
    "TAB" : [["TAB"]],
    "BSPC" : [["BSPC"]],
    "DEL" : [["DEL"]],
    "HOME" : [["HOME"]],
    "END" : [["END"]],
    "PG_UP" : [["PG_UP"]],
    "PG_DN" : [["PG_DN"]],
    "UP" : [["UP"]],
    "DOWN" : [["DOWN"]],
    "LEFT" : [["LEFT"]],
    "RIGHT" : [["RIGHT"]],
    "LSHIFT" : [["LSHIFT"]],
    "RSHIFT" : [["RSHIFT"]],
    "LCTRL" : [["LCTRL"]],
    "RCTRL" : [["RCTRL"]],
    "LALT" : [["LALT"]],
    "RALT" : [["RALT"]],
    "LGUI" : [["LGUI"]],
    "RGUI" : [["RGUI"]],
}

def get_mods_and_code(str):
    mods = []
    code = str
    if "(" in str and ")" in str :
        par = str.find("(")
        mod = str[:par]
        end = str.rfind(")")
        mods_r, code = get_mods_and_code(str[par + 1:end])
        mods = mods_r + [mod]
    return mods, code


not_stackable = ["A", "À", "B", "C", "D", "E", "É", "È", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "-"]

custom_stack = [(".", ":"), (",", ";"), ("^", "\""), ("'", "\""), ("?", "!")]